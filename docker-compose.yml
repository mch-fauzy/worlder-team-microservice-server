services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: worlder-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - worlder-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: worlder-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - worlder-network

  # Microservice B (Data Storage Service)
  microservice-b:
    build:
      context: .
      dockerfile: microservice-b/Dockerfile
    container_name: worlder-storage-service
    environment:
      - PORT=${MICROSERVICE_B_PORT}
      - GRPC_PORT=${GRPC_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=3306
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${MICROSERVICE_B_PORT}:${MICROSERVICE_B_PORT}"
      - "${GRPC_PORT}:${GRPC_PORT}"
    depends_on:
      - mysql
      - redis
    networks:
      - worlder-network
    restart: unless-stopped

  # Microservice A - Temperature Generator (Primary Data Generator Service)
  microservice-a-generator-temperature:
    build:
      context: .
      dockerfile: microservice-a/Dockerfile
    container_name: worlder-generator-temperature
    environment:
      - PORT=${MICROSERVICE_A_PORT}
      - EXTERNAL_PORT=${MICROSERVICE_A_TEMPERATURE_PORT}
      - GRPC_HOST=${GRPC_HOST}
      - GRPC_PORT=${GRPC_PORT}
      - SENSOR_TYPE=${SENSOR_TYPE_TEMPERATURE}
      - GENERATION_FREQUENCY=${GENERATION_FREQUENCY}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${MICROSERVICE_A_TEMPERATURE_PORT}:${MICROSERVICE_A_PORT}"
    depends_on:
      - microservice-b
    networks:
      - worlder-network
    restart: unless-stopped

  # Microservice A - Humidity Generator (configurable sensor type)
  microservice-a-generator-humidity:
    build:
      context: .
      dockerfile: microservice-a/Dockerfile
    container_name: worlder-generator-humidity
    environment:
      - PORT=${MICROSERVICE_A_PORT}
      - EXTERNAL_PORT=${MICROSERVICE_A_HUMIDITY_PORT}
      - GRPC_HOST=${GRPC_HOST}
      - GRPC_PORT=${GRPC_PORT}
      - SENSOR_TYPE=${SENSOR_TYPE_HUMIDITY}
      - GENERATION_FREQUENCY=${GENERATION_FREQUENCY}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${MICROSERVICE_A_HUMIDITY_PORT}:${MICROSERVICE_A_PORT}"
    depends_on:
      - microservice-b
    networks:
      - worlder-network
    restart: unless-stopped

  # Microservice A - Pressure Generator (configurable sensor type)
  microservice-a-generator-pressure:
    build:
      context: .
      dockerfile: microservice-a/Dockerfile
    container_name: worlder-generator-pressure
    environment:
      - PORT=${MICROSERVICE_A_PORT}
      - EXTERNAL_PORT=${MICROSERVICE_A_PRESSURE_PORT}
      - GRPC_HOST=${GRPC_HOST}
      - GRPC_PORT=${GRPC_PORT}
      - SENSOR_TYPE=${SENSOR_TYPE_PRESSURE}
      - GENERATION_FREQUENCY=${GENERATION_FREQUENCY}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${MICROSERVICE_A_PRESSURE_PORT}:${MICROSERVICE_A_PORT}"
    depends_on:
      - microservice-b
    networks:
      - worlder-network
    restart: unless-stopped

  # Microservice A - Light Generator (configurable sensor type)
  microservice-a-generator-light:
    build:
      context: .
      dockerfile: microservice-a/Dockerfile
    container_name: worlder-generator-light
    environment:
      - PORT=${MICROSERVICE_A_PORT}
      - EXTERNAL_PORT=${MICROSERVICE_A_LIGHT_PORT}
      - GRPC_HOST=${GRPC_HOST}
      - GRPC_PORT=${GRPC_PORT}
      - SENSOR_TYPE=${SENSOR_TYPE_LIGHT}
      - GENERATION_FREQUENCY=${GENERATION_FREQUENCY}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${MICROSERVICE_A_LIGHT_PORT}:${MICROSERVICE_A_PORT}"
    depends_on:
      - microservice-b
    networks:
      - worlder-network
    restart: unless-stopped

  # Microservice A - Motion Generator (configurable sensor type)
  microservice-a-generator-motion:
    build:
      context: .
      dockerfile: microservice-a/Dockerfile
    container_name: worlder-generator-motion
    environment:
      - PORT=${MICROSERVICE_A_PORT}
      - EXTERNAL_PORT=${MICROSERVICE_A_MOTION_PORT}
      - GRPC_HOST=${GRPC_HOST}
      - GRPC_PORT=${GRPC_PORT}
      - SENSOR_TYPE=${SENSOR_TYPE_MOTION}
      - GENERATION_FREQUENCY=${GENERATION_FREQUENCY}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${MICROSERVICE_A_MOTION_PORT}:${MICROSERVICE_A_PORT}"
    depends_on:
      - microservice-b
    networks:
      - worlder-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: worlder-nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructures/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - microservice-b
    networks:
      - worlder-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  worlder-network:
    driver: bridge
